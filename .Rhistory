idaho %>% select(ACR) %>% filter(ACR == 3)
idaho %>% select(ACR, AGS) %>% filter(ACR == 3)
idaho %>% select(ACR, AGS) %>% filter(ACR == 3, AGS == 6)
idaho %>% mutate(agricultureLogical = ACR == 3 & AGS == 6)
idaho %>% mutate(agricultureLogical = ACR == 3 & AGS == 6) %>% select(ACR, AGS, agricultureLogical)
Q1 <- idaho %>% mutate(agricultureLogical = ACR == 3 & AGS == 6) %>% select(ACR, AGS, agricultureLogical)
which(agricultureLogical)
idaho %>% mutate(agricultureLogical = ACR == 3 & AGS == 6) %>% select(ACR, AGS, agricultureLogical) %>% filter(agricultureLogical == TRUE)
idaho %>% mutate(agricultureLogical = ACR == 3 & AGS == 6) %>% filter(agricultureLogical == TRUE)
which(idaho$agricultureLogical == TRUE)
which(idaho$agricultureLogical)
indaho$agricultureLogical
idaho$agricultureLogical
mutate(idaho06, agricultureLogical = ACR == 3 & AGS == 6)
idaho06
newidaho <- mutate(idaho06, agricultureLogical = ACR == 3 & AGS == 6)
newidaho$agricultureLogical
which(newidaho$agricultureLogical == TRUE)
which(Q1$agricultureLogical)
library(jpeg)
jpeg(https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg)
jpeg("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", "instructor.jpg")
jpeg("instructur.jpg")
instructor <- jpeg("instructur.jpg")
?quantile
instructor <- jpeg("instructur.jpg", native = TRUE)
instructor
?jpeg
quantile(instructor)
instructor <- readJPG("instructur.jpg", native = TRUE)
instructor <- readJPEG("instructur.jpg", native = TRUE)
instructor <- readJPEG("instructure.jpg", native = TRUE)
instructor <- readJPEG("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", native = TRUE)
?readJPEG
dir
dir()
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", "instructor.jpg")
instructor <- readJPEG("instructor1.jpg", native = TRUE)
instructor
quantile(instructor)
quantile(instructor, c(30, 60))
quantile(instructor, c(0.3, 0.8))
quantile(instructor, c(0.30, 0.8))
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", GDP.csv)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", "GDP.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", "education.csv")
GDP <- read.csv("GDP.csv")
edu <- read.csv("education.csv")
GDP
str(GDP)
str(edu)
names(GDP)
GDP$X
names(edu)
?merge
merge(GDP, edu, by.x = "X", by.y = "CountryCode")
GDPedu <- merge(GDP, edu, by.x = "X", by.y = "CountryCode", all = TRUE)
str(GDPedu)
str(merge(GDP, edu, by.x = "X", by.y = "CountryCode"))
(merge(GDP, edu, by.x = "X", by.y = "CountryCode"))$X
(merge(GDP, edu, by.x = "X", by.y = "CountryCode"))$Long.Name
(merge(GDP, edu, by.x = "X", by.y = "CountryCode"))$X
(merge(GDP, edu, by.x = "X", by.y = "CountryCode"))$Long.Name$X
edu$CountryCode
GDP$X.1
GDP$X
str(GDP)
head(GDP)
head(GDP, 15)
names(GDP)
names(GPDedu)
names(GDPedu)
arrange(GDPedu, "Gross.domestic.product.2012")
GDPedu$Gross.domestic.product.2012
as.numeric(GDPedu$Gross.domestic.product.2012)
arrange(GDPedu, "Gross.domestic.product.2012")
arrange
arrange(GDPedu, Gross.domestic.product.2012)
arrange(GDPedu, desc(Gross.domestic.product.2012))
?arrange
?sort
arrange(GDPedu, desc(Gross.domestic.product.2012))[50]
arrange(GDPedu, desc(Gross.domestic.product.2012))[50, ]
arrange(GDPedu, desc(Gross.domestic.product.2012))[20, 2]
arrange(GDPedu, desc(Gross.domestic.product.2012))[10, 2]
arrange(GDPedu, desc(Gross.domestic.product.2012))[1, 2]
arrange(GDPedu, desc(Gross.domestic.product.2012))[2, 2]
arrange(GDPedu, desc(Gross.domestic.product.2012))[3, 2]
arrange(GDPedu, desc(Gross.domestic.product.2012))[4, 2]
arrange(GDPedu, desc(Gross.domestic.product.2012))[5, 2]
arrange(GDPedu, desc(Gross.domestic.product.2012))[6, 2]
arrange(GDPedu, desc(Gross.domestic.product.2012))[100, 2]
arrange(GDPedu, desc(Gross.domestic.product.2012))[100, 2]
arrange(GDPedu, desc(Gross.domestic.product.2012))[150, 2]
arrange(GDPedu, desc(as.numeric(Gross.domestic.product.2012))[150, 2]
)
arrange(GDPedu, desc(as.numeric(Gross.domestic.product.2012)))[150, 2]
arrange(GDPedu, desc(as.numeric(Gross.domestic.product.2012)))[1, 2]
head(arrange(GDPedu, desc(as.numeric(Gross.domestic.product.2012))), 15)
unique(GDPedu$Gross.domestic.product.2012)
unique(GDPedu$X)
GDPedu$X
unique(GDPedu$X)
unique(GDP$X)
unique(GDPedu$X)
which(unique(GDPedu$X))
(merge(GDP, edu, by.x = "X", by.y = "CountryCode"))$X
unique((merge(GDP, edu, by.x = "X", by.y = "CountryCode"))$X)
GDPedu2 <- merge(GDP, edu, by.x = "X", by.y = "CountryCode")
head(arrange(GDPedu2, desc(as.numeric(Gross.domestic.product.2012))), 15)
str(GDPedu2)
summary(group_by(GDPedu2, Income.Group))
group_by(GDPedu2, Income.Group)
summary(group_by(GDPedu2, Income.Group))
summary(group_by(GDPedu2, Income.Group), avgGDP = mean(GDP, na.rm = TRUE))
summarise(group_by(GDPedu2, Income.Group), avgGDP = mean(GDP, na.rm = TRUE))
summarise(group_by(GDPedu2, Income.Group), avgGDP = mean(as.numeric(GDP), na.rm = TRUE))
?transform
GDPedu2$Gross.domestic.product.2012
as.numeric(GDPedu2$Gross.domestic.product.2012)
GDPedu2$Gross.domestic.product.2012 <- as.numeric(GDPedu2$Gross.domestic.product.2012)
GDPedu2$Gross.domestic.product.2012
summarise(group_by(GDPedu2, Income.Group), avgGDP = mean(Gross.domestic.product.2012, na.rm = TRUE))
summarise(group_by(GDPedu2, Income.Group))
quantile(GDPedu2$Gross.domestic.product.2012)
quantile(GDPedu2$Gross.domestic.product.2012, na.rm = TRUE)
table(quantile(GDPedu2$Gross.domestic.product.2012, na.rm = TRUE))
table(quantile(GDPedu2$Gross.domestic.product.2012, na.rm = TRUE), GDPedu2$Income.Group)
quantile(GDPedu2$Gross.domestic.product.2012, c(0.2, 0.4, 0.6, 0.8, 1), na.rm = TRUE)
group_by(GDPedu2, quantile(GDPedu2$Gross.domestic.product.2012, c(0.2, 0.4, 0.6, 0.8, 1), na.rm = TRUE))
cut(GDPedu2$Gross.domestic.product.2012, breaks = quantile(GDPedu2$Gross.domestic.product.2012, c(0.2, 0.4, 0.6, 0.8, 1), na.rm = TRUE))
GDPedu$GDPgroups <- cut(GDPedu2$Gross.domestic.product.2012, breaks = quantile(GDPedu2$Gross.domestic.product.2012, c(0.2, 0.4, 0.6, 0.8, 1), na.rm = TRUE))
GDPedu2$GDPgroups <- cut(GDPedu2$Gross.domestic.product.2012, breaks = quantile(GDPedu2$Gross.domestic.product.2012, c(0.2, 0.4, 0.6, 0.8, 1), na.rm = TRUE))
table(GDPedu2$GDPgroups)
table(GDPedu2$GDPgroups, GDPedu2$Income.Group)
GDPedu2$GDPgroups <- cut(GDPedu2$Gross.domestic.product.2012, breaks = quantile(GDPedu2$Gross.domestic.product.2012, c(0, 0.2, 0.4, 0.6, 0.8, 1), na.rm = TRUE))
table(GDPedu2$GDPgroups)
table(GDPedu2$GDPgroups, GDPedu2$Income.Group)
nrows(GDPedu2)
nrow(GDPedu2)
GDPedu2[1, ]
GDP$X == edu$CountryCode
GDP$X[1] == edu$CountryCode
length(GDP$X)
list()
countryOverlap <- list()
countryOverlap
cbind(countryOverlap, 1)
cbind(countryOverlap, 2)
countryOverlap
countryOverlap <- numeric()
countryOverlap
cbind(countryOverlap, 1)
cbind(countryOverlap, 2)
countryOverlap
vector
vector()
countryOverlap <- vector()
rbind(countryOverlap, 1)
rbind(countryOverlap, 2)
countryOverlap
countryOverlap <- numeric()
rbind(countryOverlap, 1)
rbind(countryOverlap, 2)
countryOverlap
?rbind
data.frame(countryOverlap)
countryOverlap
rbind(countryOverlap, 1)
rbind(countryOverlap, 2)
countryOverlap
rbind(1, countryOverlap)
rbind(2, countryOverlap)
countryOverlap
?rbind
c(countryOverlap, 1)
countryOverlap <- c(countryOverlap, 1)
countryOverlap <- c(countryOverlap, 2)
countryOverlap
countryOverlap <- numeric()
for i:length(GDP$X) {countryOverlap <- c(countryOverlap, sum(GDP$X[i] == edu$CountryCode))}
for (i:length(GDP$X)) {countryOverlap <- c(countryOverlap, sum(GDP$X[i] == edu$CountryCode))}
for (i in length(GDP$X)) {countryOverlap <- c(countryOverlap, sum(GDP$X[i] == edu$CountryCode))}
countryOverlap
for (i in length(GDP$X)) {countryOverlap <- c(countryOverlap, sum(GDP$X[i] == edu$CountryCode))}
countryOverlap
GDP$X[2]
GDP$X[4]
GDP$X[6]
length(GDP$X)
for (i in 330) {countryOverlap <- c(countryOverlap, sum(GDP$X[i] == edu$CountryCode))}
countryOverlap
for (i in 1:length(GDP$X)) {countryOverlap <- c(countryOverlap, sum(GDP$X[i] == edu$CountryCode))}
countryOverlap
countryOverlap <- numeric()
countryOverlap
for (i in 1:length(GDP$X)) {countryOverlap <- c(countryOverlap, sum(GDP$X[i] == edu$CountryCode))}
countryOverlap
sum(countryOverlap)
GDP$X
head(GDP, 15)
head(GDP[5:length(GDP)], 15)
length(GDP)
length(GDP$X)
head(GDP[5:length(GDP$X)], 15)
head(GDP[5:length(GDP$X), ], 15)
GDP[5:length(GDP$X), ]
GDP[5:end, ]
GDP[-1:5, ]
GDP[(-1:5), ]
GDPnew <- GDP[5:length(GDP$X), ]
for (i in 1:length(GDPnew$X)) {countryOverlap <- c(countryOverlap, sum(GDPnew$X[i] == edu$CountryCode))}
countryOverlap <- numeric()
for (i in 1:length(GDPnew$X)) {countryOverlap <- c(countryOverlap, sum(GDPnew$X[i] == edu$CountryCode))}
countryOverlap
sum(countryOverlap)
GDPnew <- GDP[5:195, ]
countryOverlap <- numeric()
for (i in 1:length(GDPnew$X)) {countryOverlap <- c(countryOverlap, sum(GDPnew$X[i] == edu$CountryCode))}
countryOverlap
sum(countryOverlap)
fread
swirl()
library(tidyr)
swirl()
library(swirl)
swirl()
students
?gather
gather(students, sex, count, -grade)
students2
gather(students, sex_class, count, -grade)
gather(students2, sex_class, count, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
submit()
students3
?gather
submit()
?spread
submit()
submit()
submit()
submit()
library(readr)
parse_number("class5")
?mutate
submit()
students3$class
parse_number(c(class1, class2, class3))
parse_number(c("class1", "class2", "class3"))
submit()
submit()
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class = parse_number(class))
submit()
submit()
students4
?select
submit()
submit()
submit
submit()
submit()
passed
failed
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
bind_rows(passed, failed)
sat
?separate
submit()
submit()
getwd()
setwd("./Notes/Week 4/")
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl, destfile = "./data/cameras.csv", method = "curl")
cameraData <- read.csv("./data/cameras.csv")
names(cameraData)
tolower(names(cameraData))
splitNames = strsplit(names(cameraData), "\\.")
splitNames[[5]]
splitNames[[6]]
mylist <- list(letters = c("A", "b", "c"), numbers = 1:3, matrix(1:25, ncol = 5))
head(mylist)
mylist[1]
mylist$letters
mylist[[1]]
splitNames[[6]][1]
firstElement <- function(x){x[1]}
sapply(splitNames, firstElement)
fileUrl1 <- "https://dl.dropboxusercontent.com/u/7710864/data/reviews-apr29.csv"
fileUrl2 <- "https://dl.dropboxusercontent.com/u/7710864/data/solutions-apr29.csv"
download.file(fileUrl1, destfile = "./data/reviews.csv", method = "curl")
download.file(fileUrl2, destfile = "./data/solutions.csv", method = "curl")
reviews <- read.csv("./data/reviews.csv")
solutions <- reac.csv("./data/solutions.csv")
head(reviews, 2)
solutions <- read.csv("./data/solutions.csv")
testString <- "test_string"
sub("_", "", names(reviews))
sub("_", "", testString)
testStringtwo <- "this_is_another_test"
sub("_", "", testName)
gsub("_", "", testName)
sub("_", "", testStringtwo)
gsub("_", "", testStringtwo)
grep("Alamed", cameraData$intersection)
table(grepl("Alameda", cameraData$intersection))
cameraData2 <- cameraData[!grepl("Alameda", cameraData$intersection)]
cameraData2 <- cameraData[!grepl("Alameda", cameraData$intersection), ]
grep("Alameda", cameraData$intersection)
grepl("Alameda", cameraData$intersection)
grep("Alameda", cameraData$intersection, value = TRUE)
grep("JeffStreet", cameraData$intersection)
length(grep("JeffStreet", cameraData$intersection))
library(stringr)
nchar("Jeffrey Leek")
substr("Jeffrey Leek", 1, 7)
paste("Jeffrey", "Leek")
paste0("jeffrey", "Leek")
str_trim("Jeff     ")
d1 = date()
d1
class(d1)
d2 = Sys.Date()
d2
class(d2)
format(d2, "%a %b %d")
x = c("1jan1960", "2jan1960", "31mar1960", "30jul1960")
z = as.Date(x, "%d%b%Y")
z
z[1] - z[2]
as.numeric(z[1]-z[2])
weekdays(d2)
months(d2)
julian(d2)
library(lubridate)
ymd("20140108")
mdy("08/04/2013")
dmy("03-04-2013")
install.packages("lubridate")
library(lubridate)
ymd("20140108")
mdy("08/04/2013")
dmy("03-04-2013")
ymd_hms("2011-08-03 10:15:03")
ymd_hms("2011-08-03 10:15:03", tz = "Pacific/Auckland")
x = dmy(c("1jan2013", "2jan2013", "31mar2013", "30jul2013"))
wday(x[1])
wday(x[1], label = TRUE)
swirl()
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate
)
today()
this_day <- today()
this_day
year()
year(this_day)
wday(this_day)
wday(this_day, label = T)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
hour(this_moment)
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
ymd("March 12,
| 1975")
mdy("March 12, 1975")
lubridate(25081985)
mdy(25081985)
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
update(this_moment)
update(this_moment, hours = 12, minutes = 56, seconds = 0)
update(this_moment, hours = 00, minutes = 56, seconds = 0)
update(this_moment, day = 26, hours = 00, minutes = 56, seconds = 0)
update(this_moment, day = 26, hours = 12, minutes = 56, seconds = 0)
update(this_moment, day = 26, hours = 12, minutes = 57, seconds = 0)
update(this_moment, day = 26, hours = 0, minutes = 57, seconds = 0)
update(this_moment, day = 25, hours = 10, minutes = 00, seconds = 0)
update(this_moment, hours = 10, minutes = 00, seconds = 0)
update(this_moment, hours = 10, minutes = 00, seconds = 0, timezone = pst)
quit
q
exit
f
quit
exit
q
swirl()
quit
dir
dir()
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", "./data/idaho_housing.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", "./data/idaho_housing.csv", method = "curl")
idahoHousing <- read.csv("./data/idaho_housing.csv")
head(idahoHousing)
tail(idahoHousing)
?strsplit
strsplit(names(idahoHousing))
strsplit(names(idahoHousing), wgtp)
strsplit(names(idahoHousing), "wgtp")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", "./data/GDP.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", "./data/GDP.csv", method = "curl")
?download.file
gdp <- read.csv("./data/GDP.csv")
head(gdp)
tails(gdp)
tail(gdp)
?read.csv
gdp <- read.csv("./data/GDP.csv", skip = 4)
head(gdp)
gdp[20]
gdp[20, ]
gdp[20:30, ]
gdp[50:60, ]
gdp <- read.csv("./data/GDP.csv", skip = 4, col.names = c(countrycode, rank, name, gdp))
gdp <- read.csv("./data/GDP.csv", skip = 4, col.names = c("countrycode", "rank", "name", "gdp"))
head(cbind(gdp[,1:2], gdp[,4:5])
)
gdp <- cbind(gdp[,1:2], gdp[,4:5])
colnames(gdp) <- c("countrycode", "rank", "name", "gdp")
gdp
head(gdp)
tail(gdp)
tail(gdp, 100)
tail(gdp[1:231,])
tail(gdp[1:231,], 100)
tail(gdp[1:190,], 100)
gdp <- gdp[1:190,]
head(gdp)
gdp$gdp
sapply(gdp$gdp, sub(",", ""))
subcom <- function(x){sub(",", "", gdp$gdp)}
sapply(gdp$gdp, subcom
)
subcom <- function(x){gsub(",", "", gdp$gdp)}
subcoms <- function(x){gsub(",", "", gdp$gdp)}
sapply(gdp$gdp, subcoms)
avg(sapply(gdp$gdp, subcoms))
mean(sapply(gdp$gdp, subcoms))
gsub(",", "", gdp$gdp)
mean(gsub(",", "", gdp$gdp))
mean(as.numeric(gsub(",", "", gdp$gdp)))
grep("^United", gdp$name)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", "./data/edu.csv", method = "curl")
edu <- read.csv("./data/edu.csv")
head(edu)
names(gdp)
names(gdp)[1]
names(gdp)[1] <- "CountryCode"
merge(gdp, edu, by = "CountryCode")
gdpedu <- merge(gdp, edu, by = "CountryCode")
names(gdpedu)
tail(gdpedu)
tail(gdpedu$Latest.household.survey)
tail(gdpedu$Special.Notes)
head(gdpedu$Special.Notes)
grep("June$", gdpedu$Special.Notes)
grep("June", gdpedu$Special.Notes)
gdpedu$Special.Notes
grep("Fiscal year end: June", gdpedu$Special.Notes)
length(grep("Fiscal year end: June", gdpedu$Special.Notes))
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
head(amzn)
sampleTimes
year(sampleTimes)
amznyears <- year(sampleTimes)
grep("2014", amznyears)
length(grep("2014", amznyears))
length(grep("2012", amznyears))
wday(sampleTimes)
wday(sampleTimes, label = TRUE)
amznday <- wday(sampleTimes, label = TRUE)
grep("Mon", amznday)
length(grep("Mon", amznday))
grep("Mon", amznday) == grep("2012", amznyears)
grep("2012", amznyears)
amzn2012 <- grep("2012", amznyears)
grep("Mon", amznday[amzn2012])
amznday[amzn2012]
length(grep("Mon", amznday[amzn2012]))
